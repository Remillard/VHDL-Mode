%YAML 1.2
---
# The key_list entry is an a list (ordered) that lists the order
# that entries from the open rules section will be evaluated.  This
# works better than trying to use OrderedDict in some fashion.
key_list:
  - block-comment
  - entity
  - component
  - package-instance
  - package
  - genmap
  - portmap
  - generic
  - port
  - config
  - architecture
  - type
  - constant
  - procedure
  - block
  - function
  - process
  - case
  - casewhen
  - if
  - solothen
  - elseclause
  - elsifclause
  - loop
  - for
  - generate
  - begin
  - assertion
  - assignment
  - default

# The open_rules dictionary has a rule entry that a line is evaluated
# against to determine indentation with the following keys:
#   pattern      - The regex pattern identifying the element
#   indent_rule  - A pair comprising the indent for the current line
#                  and the indent for the following line.
#   close_rule   - A list of at least one, maybe multiple closing
#                  methods for each opening structure.  Usually a single
#                  element (like 'end') however some structures like
#                  functions and procedures have multiple ways they
#                  may end (a semicolon in the case of the prototype,
#                  and 'is' in the case of the body.).  The first
#                  value is the close_rule key to look for.  The
#                  second value is a continuation rule (if any).  The
#                  continuation rule is what to look for next in certain
#                  cases.
#   solo_flag    - A boolena flag indicating if we apply the closing indent
#                  rule to the current line if the symbol is alone on a line,
#                  or apply the closing indent rule to the following line.
#   close_offset - An integer value that applies an offset to the
#                  closing current line, mainly used for the 'map'
#                  elements.
open_rules:
  block-comment:
    close_offset: 0
    close_rule:
    - [close-comment, null]
    indent_rule:  [0, 0]
    pattern: \/\*
    solo_flag: false
    ignore_rules: null
  architecture:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: ^architecture\b
    solo_flag: false
    ignore_rules:
    - block-comment
  assertion:
    close_offset: 0
    close_rule:
    - [semicolon, null]
    indent_rule:  [0, 1]
    pattern: ^assert\b
    solo_flag: true
    ignore_rules:
    - block-comment
  assignment:
    close_offset: 0
    close_rule:
    - [semicolon, null]
    indent_rule:  [0, 1]
    pattern: ' <=| :='
    solo_flag: true
    ignore_rules:
    - block-comment
    - if
    - port
    - generic
    - procedure
    - function
  begin:
    close_offset: 0
    close_rule: null
    indent_rule:  [-1, 0]
    pattern: \bbegin\b
    solo_flag: false
    ignore_rules:
    - block-comment
  block:
    close_offset: 0
    close_rule:
    - [begin, block-concurrent]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bblock\b
    solo_flag: false
    ignore_rules:
    - block-comment
  case:
    close_offset: 0
    close_rule:
    - [endcase, null]
    indent_rule:  [0, 2]
    pattern: (?<!end )\bcase\b
    solo_flag: false
    ignore_rules:
    - block-comment
  casewhen:
    close_offset: 0
    close_rule: null
    indent_rule:  [-1, 0]
    pattern: ^when\b
    solo_flag: false
    ignore_rules:
    - block-comment
  component:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: ^\s*(?<!end )\bcomponent\b
    solo_flag: false
    ignore_rules:
    - block-comment
  config:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bconfiguration\b
    solo_flag: false
    ignore_rules:
    - block-comment
  constant:
    close_offset: 1
    close_rule:
    - [semicolon, null]
    indent_rule:  [0, 1]
    pattern: ^\bconstant\b
    solo_flag: true
    ignore_rules:
    - block-comment
    - procedure
    - function
  default:
    close_offset: 0
    close_rule: null
    indent_rule:  [0, 0]
    pattern: .*
    solo_flag: false
    ignore_rules:
    - block-comment
  elseclause:
    close_offset: 0
    close_rule: null
    indent_rule:  [-1, 0]
    pattern: ^else\b
    solo_flag: false
    ignore_rules:
    - block-comment
  elsifclause:
    close_offset: 0
    close_rule: null
    indent_rule:  [-1, 0]
    pattern: ^elsif\b
    solo_flag: false
    ignore_rules:
    - block-comment
  entity:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: ^entity\b
    solo_flag: false
    ignore_rules:
    - block-comment
  for:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule: [0, 1]
    pattern: ^\s*\bfor\b
    solo_flag: false
    ignore_rules:
    - block-comment
  function:
    close_offset: 1
    close_rule:
    - [function_semi, null]
    - [function_is, function_is]
    indent_rule:  [0, 1]
    pattern: ^(?<!end )(?:(pure|impure) )?function\b
    solo_flag: true
    ignore_rules:
    - block-comment
  generate:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bgenerate\b
    solo_flag: false
    ignore_rules:
    - block-comment
  generic:
    close_offset: 0
    close_rule:
    - [close_semi, null]
    indent_rule:  [0, 0]
    pattern: \bgeneric\b
    solo_flag: true
    ignore_rules:
    - block-comment
  genmap:
    close_offset: 1
    close_rule:
    - [close_paren, null]
    indent_rule:  [1, 1]
    pattern: \bgeneric map\b
    solo_flag: true
    ignore_rules:
    - block-comment
    - block
  if:
    close_offset: 0
    close_rule:
    - [then, then]
    - [generate, generate]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bif\b
    solo_flag: false
    ignore_rules:
    - block-comment
  loop:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bloop\b
    solo_flag: false
    ignore_rules:
    - block-comment
  # VHDL-2008 Construct.  Ends on a semicolon and can contain a
  # generic map.  Generic map takes care of itself, so package instance
  # doesn't need to indent.  We'll just look for a semicolon.
  package-instance:
    pattern: 'package \w* is new'
    indent_rule: [0, 0]
    close_rule:
      - [close_semi, null]
    solo_flag: false
    close_offset: 0
    ignore_rules:
    - block-comment
  package:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: (?<!end )\bpackage\b
    solo_flag: false
    ignore_rules:
    - block-comment
  port:
    close_offset: 0
    close_rule:
    - [close_semi, null]
    indent_rule:  [0, 0]
    pattern: \bport\b
    solo_flag: true
    ignore_rules:
    - block-comment
  portmap:
    close_offset: 1
    close_rule:
    - [close_semi, null]
    indent_rule:  [1, 1]
    pattern: \bport map\b
    solo_flag: true
    ignore_rules:
    - block-comment
    - block
  procedure:
    close_offset: 1
    close_rule:
    - [semicolon, null]
    - [isclause, function_is]
    indent_rule:  [0, 1]
    pattern: ^(?<!end )\bprocedure\b
    solo_flag: true
    ignore_rules:
    - block-comment
  process:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: (?<!end )(?<!end postponed )\bprocess\b
    solo_flag: false
    ignore_rules:
    - block-comment
  # This is for a weird code style that uses the 'then' as the
  # starting element of its own line.  Thanks for that, Leo, you
  # butthead.
  solothen:
    close_offset: 0
    close_rule: null
    indent_rule:  [-1, 0]
    pattern: ^then\b
    solo_flag: false
    ignore_rules:
    - block-comment
  type:
    close_offset: 1
    close_rule:
    - [semicolon, null]
    - [record, record]
    - [units, units]
    indent_rule:  [0, 1]
    pattern: ^\btype\b
    solo_flag: true
    ignore_rules:
    - generic
    - block-comment
  # Keys past here are only dummies for continuing
  # a statement whose lexical possibilities branch.
  # They will not be scanned as a primary opener
  # because default will catch everything not matched.
  #
  # They don't have a pattern for matching because the
  # clause gets activated by the close_rule portion
  # of the originating structure, and if the close
  # rule matches, we branch to these to setup a new
  # closing rule.
  #
  # All other fields are as described above.
  #
  # Maintaining these entries at the bottom of the list
  # in case I can ever go back to OrderedDict.
  # Excluding them from the key_list iteration does
  # the same thing as the default matching everything.
  isclause:
    close_offset: 0
    close_rule:
    - [endclause, null]
    solo_flag: true
    start_offset: -1
    ignore_rules: null
  function_is:
    close_offset: 0
    close_rule:
    - [endclause, null]
    solo_flag: true
    start_offset: 0
    ignore_rules: null
  record:
    close_offset: 0
    close_rule:
    - [endclause, null]
    solo_flag: false
    start_offset: 0
    ignore_rules: null
  units:
    close_offset: 0
    close_rule:
    - [endclause, null]
    solo_flag: false
    start_offset: 0
    ignore_rules: null
  then:
    close_offset: 0
    close_rule:
    - [endif, null]
    indent_rule:  [0, 1]
    pattern: \bthen\b
    solo_flag: false
    ignore_rules: null
  block-concurrent:
    close_offset: 0
    close_rule:
    - [endclause, null]
    indent_rule:  [0, 1]
    pattern: \bbegin\b
    solo_flag: false
    ignore_rules: null

close_rules:
  close_paren: \)
  close_semi: \)\s*;
  endclause: '\bend\b\s?(\w+)?\s?(\w+)?\s?(\w+)?\s?'
  endif: '\bend\s+(if|generate)\b'
  endcase: '\bend\s+case\b'
  function_is: \breturn\s+\w+\s+is
  function_semi: \breturn\s+\w+s*;
  isclause: \bis\b
  record: \brecord\b
  semicolon: ;
  units: \bunits\b
  then: \bthen\b
  generate: \bgenerate\b
  close-comment: \*\/
  begin: \bbegin\b

